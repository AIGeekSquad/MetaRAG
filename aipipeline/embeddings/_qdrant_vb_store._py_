
from aipipeline.utilities.constants import SIMILARITY_TYPE, VECTORDB_TYPE
from aipipeline.vector_storage.vdb_base_component import VectorDBBaseComponent, VectorDBBaseComponentPoint

from qdrant_client import QdrantClient
from typing import Any, Dict, List,Optional

class Qdrant_store(VectorDBBaseComponent):
    def __init__(self, client:QdrantClient):
        self._client = client
    
    def create_collection(
        self,
        collection_name: str,
        vdb_ype: VECTORDB_TYPE,
        similiarity: Optional[SIMILARITY_TYPE] = SIMILARITY_TYPE.COSINE
    ):
        """Create Collection for Vectors"""

    def store_vectors(
        self,
        vdb_type: VECTORDB_TYPE,
        collection_name: str,
        vector: List[float],
        metadata: Dict[str, Any]
    ) -> Any:
        """Upsert vectors into vectordb, return true if successful"""

    def get_collection_data(
        self,
        **kwargs
    ) -> Any:
        """Get Collection and Vector data"""

    def search_vectors(
        self,
        collection_name: str,
        query_vector: List[float],
        query_vector_name: Optional[str] = None,
        top_k: Optional[int] = 5, 
    ) -> List[VectorDBBaseComponentPoint]:
         """Do ANN Search by vector"""
         points = self._client.search(collection_name = collection_name, query_vector= query_vector,limit= top_k)
         return[VectorDBBaseComponentPoint(score=point.score, payload=point.payload) for point in points]

 
# def _get_retriever(documentGraph: DocumentGraphBaseComponent, 
#                   vectorStore: VectorDBBaseComponent,
#                   vectorCollection: str)-> VectorAndGraphRetriever: 

#     inner_retriever = VectorAndGraphRetriever(documentGraph, 
#                                         vectorStore,
#                                         vectorCollection,
#                                         QuerySvcEnvs.CONFIGURATION.retriever.top_k,
#                                         QuerySvcEnvs.EMBED_MODEL)  
    
#     fusion_retriever = QueryFusionRetriever(
#         [inner_retriever],
#         llm = QuerySvcEnvs.LLM_MODEL,
#         similarity_top_k=QuerySvcEnvs.CONFIGURATION.retriever.top_k,
#         num_queries=QuerySvcEnvs.CONFIGURATION.retriever.query_iteration_max,  # set this to 1 to disable query generation
#         mode="reciprocal_rerank",
#         # query_gen_prompt="...",  # we could override the query generation prompt here
#         verbose = True,
#     )

#     return fusion_retriever  

# def _get_query_engine(retriever: BaseRetriever) -> BaseQueryEngine:

#     node_postprocessors: List[BaseNodePostprocessor] = []
#     if QuerySvcEnvs.CONFIGURATION.query_engine.use_reranker:
#         node_postprocessors.append(RankGPTRerank(llm=QuerySvcEnvs.LLM_MODEL, top_n=QuerySvcEnvs.CONFIGURATION.retriever.top_k, verbose=False))
    
#     query_engine = RetrieverQueryEngine.from_args(retriever, response_mode= ResponseMode.REFINE, llm=QuerySvcEnvs.LLM_MODEL, node_postprocessors=node_postprocessors)

#     if (QuerySvcEnvs.CONFIGURATION.query_engine.type == "FLARE"):
#         query_engine = FLAREInstructQueryEngine(query_engine=query_engine, llm=QuerySvcEnvs.LLM_MODEL, max_iterations=QuerySvcEnvs.CONFIGURATION.query_engine.iteration_max, verbose=True)
        
#     return query_engine
